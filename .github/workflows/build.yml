name: Multi-Platform Build with libaribb25 and recdvb

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  WORKDIR: ${{ github.workspace }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      # [Ubuntu] Install dependencies
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ gcc make build-essential autoconf automake libpcsclite-dev pcscd pcsc-tools libccid pkg-config

      # [macOS] Install dependencies
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake gcc make autoconf automake pkg-config pcsc-lite

      # [Ubuntu] Build libarib25
      - name: Build libarib25 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd lib/libaribb25
          cmake -B build && cd build
          make && sudo make install
          mkdir -p $WORKDIR/bin_ubuntu/libaribb25
          cp arib-b1-stream-test arib-b25-stream-test b1 b25 $WORKDIR/bin_ubuntu/libaribb25/
          echo "done!"

      # [Ubuntu] Build recdvb
      - name: Build recdvb (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd lib/recdvb
          git submodule init && git submodule update
          ./autogen.sh
          ./configure --enable-b25
          make && sudo make install
          mkdir -p $WORKDIR/bin_ubuntu/recdvb
          cp recdvb recpt1ctl chkdvbsignal tssplitter_lite $WORKDIR/bin_ubuntu/recdvb
          echo "done!"

      # [macOS] Build libarib25
      - name: Build libarib25 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd lib/libaribb25
          cmake -B build && cd build
          make
          mkdir -p $WORKDIR/bin_macos/libaribb25
          cp arib-b1-stream-test arib-b25-stream-test b1 b25 $WORKDIR/bin_macos/libaribb25/
          echo "done!"

      # [Ubuntu] Archive and upload libaribb25
      - name: Archive libaribb25 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czvf libaribb25_ubuntu.tar.gz $WORKDIR/bin_ubuntu/libaribb25/
      - name: Upload libaribb25 Artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: libaribb25_ubuntu
          path: libaribb25_ubuntu.tar.gz

      # [Ubuntu] Archive and upload recdvb
      - name: Archive recdvb (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czvf recdvb_ubuntu.tar.gz $WORKDIR/bin_ubuntu/recdvb/
      - name: Upload recdvb Artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: recdvb_ubuntu
          path: recdvb_ubuntu.tar.gz

      # [macOS] Archive and upload libaribb25
      - name: Archive libaribb25 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          tar -czvf libaribb25_macos.tar.gz $WORKDIR/bin_macos/libaribb25/
      - name: Upload libaribb25 Artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: libaribb25_macos
          path: libaribb25_macos.tar.gz

      # Generate and push a new tag
      - name: Generate tag
        if: github.ref == 'refs/heads/main'
        run: |
          TAG_DATE=$(date +'%Y%m%d')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG_NAME="v${TAG_DATE}-${SHORT_SHA}-${{ matrix.os }}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          git tag $TAG_NAME
          git push origin $TAG_NAME

      # Create a GitHub Release
      - name: Create Release
        id: create_release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }} for ${{ matrix.os }}
          draft: false
          prerelease: false

      # Upload release asset
      - name: Upload release asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libaribb25_ubuntu.tar.gz
          asset_name: libaribb25_ubuntu.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libaribb25_macos.tar.gz
          asset_name: libaribb25_macos.tar.gz
          asset_content_type: application/gzip
